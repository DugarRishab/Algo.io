/*
problem
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21

*/
import java.util.*;
class Solution {
    public int reverse(int x) {
        long reverse=0;//taking reverse because reverse can also be out of int range
        long val=Math.abs(x);//it gives no without sign
        //making the reverse of no
        while(val>0){
            long digit=val%10;
            reverse=reverse*10+digit;
            val=val/10;
        }
        //checking if no was negative it into again negative
        if(Math.abs(x)!=x){
            reverse=(-(reverse));
        }
        //checking for out of range
       if(reverse>Integer.MAX_VALUE || reverse<Integer.MIN_VALUE)return 0;
   return (int) reverse;//returning again in integer 
    }
}
